# Reafactor proposals

1. Lung 
    a. Hold the related physiologies from subject product api parameters 
    b. generalise lung generation and region with
    - same compartment structure i.e.,  1 ELF, n_layer Epithelium, 1 Tissue
    - Hold the differential equations
    - perhaps as a sub-class e.g., lung_entity()
    c. Loop over to run either with generation or regional level to create the differential equations for lung pbpk model
2. GItract and gut absorption model
    a. Hold the physiology parameters from subjectt priducts apis...
    b. Hold the differential equations
3. Pharmacokinetics model with 1,2,3 cpt
    a. Hold the PK parameters from subject products apis...
    b. Hold the PK compartment models

5. class deposition
    a. Hold the parameters related to deposition from both physioology and product api properties and setup etc..
    b. Hold the method for calculating lung deposition (lung deposition now is a numba jitted classes methods, it is ok to keep as is and make a another method to pass other non-jitted class to suitable aruguments for this numba function)
6. class PBBM
    a. Hold/Pass parameters related to its content from physiologies, products, api, model...
    b. call the lung model, gitract model, and PK model to set up the equation and methods
    c. the solver needs to be numba jitted for performance (as disscussed, the actual differential equations should be defined outside of the ode system)
    d. if needed, can make another jitted class to set up and solve all the ode as jitted classes and functions
    in this case, this just process the inputs outputs to call the jitted method, similar to lung deposittion                                                                          


                                                                               
7. Class subject
    a. Hold all subject pjhysiolgoies and parameters that will be passed to the others, here is the single point of default or inputs
    b. Hold the variabilities class methods
    c  Hold the method to apply variabiltity to make individual subjects                                                                           
    d. Hold the Functions call, i'd like to call:
        subject.run_pbbm(product.api)
        subject.run_deposition(product.api)
8. class API:
    a. hold api properties
    b. hold api invitro data
    c. hold api data from deposition and pbpk and virtual be....
9. class product:
    a. Hold product properties
    b. Hold and pass properties to API
10. class study:
     a. Hold products
     b. Hold subjects
     c. Hold designs                                                                          
4. Data structure, consistent and structured like:
    a. Study.Product.API.Subject.Lung.Region.Compartment.Concentration.Unbound..., or Study.Subject.Lung.Region.Compartment.Product.API.Concentration.Unbound...
    b. Subject.Lung.Region.Compartment.Physiology.Area.., Subject.Lung.Region.Physiology..., Subject.Lung.Physiology...

Main workflow
-make setting                                                                                
-make study
-make products, apis
-make subject
-make model
-execution
-plots...

can consider:                                                                               
#class Concentration:
    # define with types: Unbound, Bound, Total
#class Amounnt:
    # define with types: Unbound, Bound, Total, similar to concentration

#class Compartment:
    # Define with Physiology = Physiology(lung = region or generation)
    # include instance of other classes
# class lung_entity that include an instance of class compartment